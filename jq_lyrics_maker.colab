{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"JQ Lyric Maker","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOcIIobi24R4YHg9LO3Kzvb"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"D8_vX7DZNyVu","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593872862001,"user_tz":180,"elapsed":880,"user":{"displayName":"Vinícius Dias","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjmnjUGHLWXLxURc9fL1MKWL6HhV5-jFE23cFdnRw=s64","userId":"11430726225538694207"}}},"source":["# lyrics_url = 'https://raw.githubusercontent.com/irmao/jq-lyric-maker/master/all_lyrics100.txt'\n","lyrics_url = 'https://raw.githubusercontent.com/irmao/jq-lyric-maker/master/all_lyrics.txt'\n","sequence_length = 20\n","test_size_percentage = 10"],"execution_count":90,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hUWdp2z5N2Lb","colab_type":"text"},"source":["## Download Data\n","\n","Input vars:\n","\n","*  lyrics_url\n","\n","Output vars:\n","*  full_lyrics"]},{"cell_type":"code","metadata":{"id":"0k5O23VROEQK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1593872865969,"user_tz":180,"elapsed":1327,"user":{"displayName":"Vinícius Dias","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjmnjUGHLWXLxURc9fL1MKWL6HhV5-jFE23cFdnRw=s64","userId":"11430726225538694207"}},"outputId":"34c06067-692f-47a7-b4d4-1690a7bcd663"},"source":["import urllib.request\n","import re\n","\n","print('Downloading lyrics from repository')\n","\n","response = urllib.request.urlopen(lyrics_url)\n","data = response.read()      # a `bytes` object\n","\n","# full_lyrics = re.findall(r\"[\\w']+\", data.decode('utf-8'))\n","full_lyrics = data.decode('utf-8')"],"execution_count":91,"outputs":[{"output_type":"stream","text":["Downloading lyrics from repository\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xH9Fcg5zR1Do","colab_type":"text"},"source":["## Initialize data\n","\n","Input vars:\n","*  full_lyrics\n","\n","Output vars:\n","*  vocab\n","*  vocab_size\n","*  char_indices\n","*  indices_char\n","*  sequences\n","*  sequences_size\n","*  expected_output\n","*  expected_output_size\n","*  train_input\n","*  train_output\n","*  test_input\n","*  test_output"]},{"cell_type":"code","metadata":{"id":"AHWwV6MESI7j","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593872870987,"user_tz":180,"elapsed":2392,"user":{"displayName":"Vinícius Dias","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjmnjUGHLWXLxURc9fL1MKWL6HhV5-jFE23cFdnRw=s64","userId":"11430726225538694207"}}},"source":["import numpy as np\n","\n","# creates a set of all unique chars found in the text\n","vocab = sorted((list(set(full_lyrics))))\n","vocab_size = len(vocab)\n","\n","# creates a dictionary to map each char to a number\n","char_indices = dict((c, i) for i, c in enumerate(vocab))\n","\n","# creates a dictionary to map back each number to a char\n","indices_char = dict((i,c) for i, c in enumerate(vocab))\n","\n","sequences = []\n","expected_output = []\n","\n","for i in range(0, len(full_lyrics) - sequence_length):\n","    sequences.append(full_lyrics[i: i + sequence_length])\n","    expected_output.append(full_lyrics[i + sequence_length])\n","\n","sequences_size = len(sequences)\n","expected_output_size = len(expected_output)\n","\n","# create empty matrices for input and output sets\n","train_input = np.zeros((sequences_size, sequence_length), dtype=np.int8)\n","train_output = np.zeros(sequences_size, dtype=np.int8)\n","\n","# converts each char to its related index and add them into the matrices\n","for i, inpt in enumerate(sequences):\n","    for j, char in enumerate(inpt):\n","        train_input[i, j] = char_indices[char]\n","    train_output[i] = char_indices[expected_output[i]]\n","\n","test_input_size = int(len(train_output) * test_size_percentage / 100)\n","\n","test_input = train_input[:test_input_size]\n","test_output = train_output[:test_input_size]\n","train_input = train_input[test_input_size:]\n","train_output = train_output[test_input_size:]"],"execution_count":92,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nhYHl4lg3eaU","colab_type":"text"},"source":["# Create Model\n"]},{"cell_type":"code","metadata":{"id":"VxStRtSp3r-M","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":301},"executionInfo":{"status":"ok","timestamp":1593872883018,"user_tz":180,"elapsed":904,"user":{"displayName":"Vinícius Dias","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjmnjUGHLWXLxURc9fL1MKWL6HhV5-jFE23cFdnRw=s64","userId":"11430726225538694207"}},"outputId":"cd0b7918-343b-4db4-be22-3e5d14fbcc5d"},"source":["from keras.models import Sequential\n","from keras.layers import Embedding\n","from keras.layers import Dense\n","from keras.layers import Dropout\n","from keras.layers import LSTM\n","from google.colab import drive\n","\n","model = Sequential()\n","\n","embedding_output_dim = 50\n","\n","# A word embedding is a class of approaches for representing words and documents using a dense vector\n","# representation. Keras offers an Embedding layer that can be used for neural networks on text data.\n","#\n","# input_dim: This is the size of the vocabulary in the text data. For example, if your data is integer\n","#            encoded to values between 0-10, then the size of the vocabulary would be 11 words.\n","# output_dim: This is the size of the vector space in which words will be embedded. It defines the size\n","#            of the output vectors from this layer for each word. For example, it could be 32 or 100 or even\n","#            larger. Test different values f    or your problem.\n","# input_length: This is the length of input sequences, as you would define for any input layer of a Keras model.\n","#            For example, if all of your input documents are comprised of 1000 words, this would be 1000.\n","model.add(Embedding(vocab_size, embedding_output_dim, input_length=sequence_length))\n","\n","model.add(LSTM(embedding_output_dim, activation='relu'))\n","model.add(Dropout(0.2))\n","model.add(Dense(vocab_size, activation='softmax'))\n","\n","model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","model.summary()"],"execution_count":93,"outputs":[{"output_type":"stream","text":["Model: \"sequential_9\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_9 (Embedding)      (None, 20, 50)            3850      \n","_________________________________________________________________\n","lstm_9 (LSTM)                (None, 50)                20200     \n","_________________________________________________________________\n","dropout_8 (Dropout)          (None, 50)                0         \n","_________________________________________________________________\n","dense_9 (Dense)              (None, 77)                3927      \n","=================================================================\n","Total params: 27,977\n","Trainable params: 27,977\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-0m0NkJ5UN36","colab_type":"text"},"source":["# Train\n","\n","Input:\n","*    model\n","\n","Output:\n","*    history"]},{"cell_type":"code","metadata":{"id":"QK0srgxxU7_W","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1593875728251,"user_tz":180,"elapsed":2838785,"user":{"displayName":"Vinícius Dias","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjmnjUGHLWXLxURc9fL1MKWL6HhV5-jFE23cFdnRw=s64","userId":"11430726225538694207"}},"outputId":"779b72fc-a5c0-4791-8571-5a1f8fc3f2b1"},"source":["from google.colab import drive\n","\n","model.summary()\n","history = model.fit(train_input, train_output, batch_size=128, epochs=100)\n","\n","\n","# drive.mount('/content/gdrive')\n","# model.save(F\"/content/gdrive/My Drive/Colab Notebooks/jq-model.h5\")\n"],"execution_count":94,"outputs":[{"output_type":"stream","text":["Model: \"sequential_9\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_9 (Embedding)      (None, 20, 50)            3850      \n","_________________________________________________________________\n","lstm_9 (LSTM)                (None, 50)                20200     \n","_________________________________________________________________\n","dropout_8 (Dropout)          (None, 50)                0         \n","_________________________________________________________________\n","dense_9 (Dense)              (None, 77)                3927      \n","=================================================================\n","Total params: 27,977\n","Trainable params: 27,977\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/indexed_slices.py:434: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.\n","  \"Converting sparse IndexedSlices to a dense Tensor of unknown shape. \"\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/100\n","140983/140983 [==============================] - 28s 202us/step - loss: 2.7835 - accuracy: 0.2279\n","Epoch 2/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 2.3042 - accuracy: 0.3120\n","Epoch 3/100\n","140983/140983 [==============================] - 28s 199us/step - loss: 2.1523 - accuracy: 0.3496\n","Epoch 4/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 2.0602 - accuracy: 0.3731\n","Epoch 5/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.9921 - accuracy: 0.3888\n","Epoch 6/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.9433 - accuracy: 0.4049\n","Epoch 7/100\n","140983/140983 [==============================] - 28s 199us/step - loss: 1.9037 - accuracy: 0.4138\n","Epoch 8/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.8723 - accuracy: 0.4233\n","Epoch 9/100\n","140983/140983 [==============================] - 29s 205us/step - loss: 1.8490 - accuracy: 0.4302\n","Epoch 10/100\n","140983/140983 [==============================] - 28s 201us/step - loss: 1.8310 - accuracy: 0.4345\n","Epoch 11/100\n","140983/140983 [==============================] - 29s 205us/step - loss: 1.8122 - accuracy: 0.4403\n","Epoch 12/100\n","140983/140983 [==============================] - 29s 203us/step - loss: 1.7959 - accuracy: 0.4456\n","Epoch 13/100\n","140983/140983 [==============================] - 29s 203us/step - loss: 1.7803 - accuracy: 0.4496\n","Epoch 14/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.7681 - accuracy: 0.4534\n","Epoch 15/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.7592 - accuracy: 0.4548\n","Epoch 16/100\n","140983/140983 [==============================] - 29s 203us/step - loss: 1.7482 - accuracy: 0.4578\n","Epoch 17/100\n","140983/140983 [==============================] - 28s 196us/step - loss: 1.7425 - accuracy: 0.4589\n","Epoch 18/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.7328 - accuracy: 0.4619\n","Epoch 19/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.7243 - accuracy: 0.4648\n","Epoch 20/100\n","140983/140983 [==============================] - 32s 228us/step - loss: 1.7187 - accuracy: 0.4661\n","Epoch 21/100\n","140983/140983 [==============================] - 28s 198us/step - loss: 1.7116 - accuracy: 0.4673\n","Epoch 22/100\n","140983/140983 [==============================] - 28s 197us/step - loss: 1.7060 - accuracy: 0.4694\n","Epoch 23/100\n","140983/140983 [==============================] - 28s 201us/step - loss: 1.6983 - accuracy: 0.4703\n","Epoch 24/100\n","140983/140983 [==============================] - 29s 203us/step - loss: 1.6949 - accuracy: 0.4724\n","Epoch 25/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.6914 - accuracy: 0.4738\n","Epoch 26/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.6882 - accuracy: 0.4739\n","Epoch 27/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.6844 - accuracy: 0.4751\n","Epoch 28/100\n","140983/140983 [==============================] - 29s 205us/step - loss: 1.6772 - accuracy: 0.4776\n","Epoch 29/100\n","140983/140983 [==============================] - 29s 205us/step - loss: 1.6719 - accuracy: 0.4796\n","Epoch 30/100\n","140983/140983 [==============================] - 29s 205us/step - loss: 1.6725 - accuracy: 0.4797\n","Epoch 31/100\n","140983/140983 [==============================] - 29s 208us/step - loss: 1.6683 - accuracy: 0.4798\n","Epoch 32/100\n","140983/140983 [==============================] - 29s 206us/step - loss: 1.6667 - accuracy: 0.4824\n","Epoch 33/100\n","140983/140983 [==============================] - 29s 205us/step - loss: 1.6625 - accuracy: 0.4824\n","Epoch 34/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.6571 - accuracy: 0.4829\n","Epoch 35/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.6543 - accuracy: 0.4839\n","Epoch 36/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.6536 - accuracy: 0.4851\n","Epoch 37/100\n","140983/140983 [==============================] - 29s 205us/step - loss: 1.6486 - accuracy: 0.4861\n","Epoch 38/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.6492 - accuracy: 0.4861\n","Epoch 39/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.6455 - accuracy: 0.4857\n","Epoch 40/100\n","140983/140983 [==============================] - 29s 203us/step - loss: 1.6427 - accuracy: 0.4867\n","Epoch 41/100\n","140983/140983 [==============================] - 32s 230us/step - loss: 1.6378 - accuracy: 0.4888\n","Epoch 42/100\n","140983/140983 [==============================] - 28s 202us/step - loss: 1.6367 - accuracy: 0.4875\n","Epoch 43/100\n","140983/140983 [==============================] - 28s 199us/step - loss: 1.6381 - accuracy: 0.4888\n","Epoch 44/100\n","140983/140983 [==============================] - 28s 199us/step - loss: 1.6339 - accuracy: 0.4895\n","Epoch 45/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.6332 - accuracy: 0.4898\n","Epoch 46/100\n","140983/140983 [==============================] - 28s 199us/step - loss: 1.6291 - accuracy: 0.4916\n","Epoch 47/100\n","140983/140983 [==============================] - 28s 198us/step - loss: 1.6300 - accuracy: 0.4907\n","Epoch 48/100\n","140983/140983 [==============================] - 28s 197us/step - loss: 1.6294 - accuracy: 0.4906\n","Epoch 49/100\n","140983/140983 [==============================] - 28s 197us/step - loss: 1.6275 - accuracy: 0.4910\n","Epoch 50/100\n","140983/140983 [==============================] - 28s 199us/step - loss: 1.6272 - accuracy: 0.4916\n","Epoch 51/100\n","140983/140983 [==============================] - 28s 197us/step - loss: 1.6249 - accuracy: 0.4924\n","Epoch 52/100\n","140983/140983 [==============================] - 28s 201us/step - loss: 1.6228 - accuracy: 0.4932\n","Epoch 53/100\n","140983/140983 [==============================] - 28s 199us/step - loss: 1.6191 - accuracy: 0.4936\n","Epoch 54/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.6203 - accuracy: 0.4928\n","Epoch 55/100\n","140983/140983 [==============================] - 28s 198us/step - loss: 1.6177 - accuracy: 0.4936\n","Epoch 56/100\n","140983/140983 [==============================] - 28s 197us/step - loss: 1.6184 - accuracy: 0.4938\n","Epoch 57/100\n","140983/140983 [==============================] - 28s 199us/step - loss: 1.6151 - accuracy: 0.4953\n","Epoch 58/100\n","140983/140983 [==============================] - 28s 197us/step - loss: 1.6156 - accuracy: 0.4948\n","Epoch 59/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.6126 - accuracy: 0.4952\n","Epoch 60/100\n","140983/140983 [==============================] - 28s 201us/step - loss: 1.6134 - accuracy: 0.4951\n","Epoch 61/100\n","140983/140983 [==============================] - 28s 201us/step - loss: 1.6113 - accuracy: 0.4951\n","Epoch 62/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.6115 - accuracy: 0.4961\n","Epoch 63/100\n","140983/140983 [==============================] - 32s 229us/step - loss: 1.6093 - accuracy: 0.4973\n","Epoch 64/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.6088 - accuracy: 0.4960\n","Epoch 65/100\n","140983/140983 [==============================] - 28s 198us/step - loss: 1.6070 - accuracy: 0.4972\n","Epoch 66/100\n","140983/140983 [==============================] - 28s 196us/step - loss: 1.6061 - accuracy: 0.4973\n","Epoch 67/100\n","140983/140983 [==============================] - 28s 199us/step - loss: 1.6043 - accuracy: 0.4980\n","Epoch 68/100\n","140983/140983 [==============================] - 28s 202us/step - loss: 1.6021 - accuracy: 0.4982\n","Epoch 69/100\n","140983/140983 [==============================] - 28s 202us/step - loss: 1.6025 - accuracy: 0.4981\n","Epoch 70/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.5994 - accuracy: 0.5003\n","Epoch 71/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.6043 - accuracy: 0.4980\n","Epoch 72/100\n","140983/140983 [==============================] - 28s 201us/step - loss: 1.5981 - accuracy: 0.4985\n","Epoch 73/100\n","140983/140983 [==============================] - 28s 201us/step - loss: 1.6003 - accuracy: 0.4991\n","Epoch 74/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.5970 - accuracy: 0.4998\n","Epoch 75/100\n","140983/140983 [==============================] - 29s 206us/step - loss: 1.5992 - accuracy: 0.4985\n","Epoch 76/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.5943 - accuracy: 0.4997\n","Epoch 77/100\n","140983/140983 [==============================] - 28s 199us/step - loss: 1.5952 - accuracy: 0.5003\n","Epoch 78/100\n","140983/140983 [==============================] - 28s 198us/step - loss: 1.5957 - accuracy: 0.4997\n","Epoch 79/100\n","140983/140983 [==============================] - 28s 197us/step - loss: 1.5934 - accuracy: 0.5008\n","Epoch 80/100\n","140983/140983 [==============================] - 28s 198us/step - loss: 1.5947 - accuracy: 0.5005\n","Epoch 81/100\n","140983/140983 [==============================] - 28s 196us/step - loss: 1.5950 - accuracy: 0.4998\n","Epoch 82/100\n","140983/140983 [==============================] - 28s 197us/step - loss: 1.5949 - accuracy: 0.4996\n","Epoch 83/100\n","140983/140983 [==============================] - 28s 198us/step - loss: 1.5928 - accuracy: 0.5004\n","Epoch 84/100\n","140983/140983 [==============================] - 29s 204us/step - loss: 1.5916 - accuracy: 0.5001\n","Epoch 85/100\n","140983/140983 [==============================] - 31s 222us/step - loss: 1.5907 - accuracy: 0.5026\n","Epoch 86/100\n","140983/140983 [==============================] - 28s 197us/step - loss: 1.5900 - accuracy: 0.5015\n","Epoch 87/100\n","140983/140983 [==============================] - 28s 197us/step - loss: 1.5912 - accuracy: 0.5011\n","Epoch 88/100\n","140983/140983 [==============================] - 28s 196us/step - loss: 1.5872 - accuracy: 0.5021\n","Epoch 89/100\n","140983/140983 [==============================] - 28s 195us/step - loss: 1.5908 - accuracy: 0.5000\n","Epoch 90/100\n","140983/140983 [==============================] - 28s 196us/step - loss: 1.5853 - accuracy: 0.5031\n","Epoch 91/100\n","140983/140983 [==============================] - 28s 196us/step - loss: 1.5870 - accuracy: 0.5032\n","Epoch 92/100\n","140983/140983 [==============================] - 27s 195us/step - loss: 1.5854 - accuracy: 0.5034\n","Epoch 93/100\n","140983/140983 [==============================] - 27s 194us/step - loss: 1.5863 - accuracy: 0.5017\n","Epoch 94/100\n","140983/140983 [==============================] - 27s 195us/step - loss: 1.5856 - accuracy: 0.5025\n","Epoch 95/100\n","140983/140983 [==============================] - 27s 195us/step - loss: 1.5829 - accuracy: 0.5038\n","Epoch 96/100\n","140983/140983 [==============================] - 28s 196us/step - loss: 1.5862 - accuracy: 0.5019\n","Epoch 97/100\n","140983/140983 [==============================] - 28s 200us/step - loss: 1.5852 - accuracy: 0.5022\n","Epoch 98/100\n","140983/140983 [==============================] - 28s 196us/step - loss: 1.5877 - accuracy: 0.5029\n","Epoch 99/100\n","140983/140983 [==============================] - 28s 195us/step - loss: 1.5803 - accuracy: 0.5041\n","Epoch 100/100\n","140983/140983 [==============================] - 27s 195us/step - loss: 1.5840 - accuracy: 0.5034\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wcE75c8bHP4v","colab_type":"text"},"source":["# Evaluate"]},{"cell_type":"code","metadata":{"id":"GSigUvaJHYWY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":626},"executionInfo":{"status":"ok","timestamp":1593875846133,"user_tz":180,"elapsed":2044,"user":{"displayName":"Vinícius Dias","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjmnjUGHLWXLxURc9fL1MKWL6HhV5-jFE23cFdnRw=s64","userId":"11430726225538694207"}},"outputId":"97c4a1f5-9cd6-4514-b9b9-3b824755f307"},"source":["import matplotlib.pyplot as plt\n","\n","results = model.evaluate(test_input, test_output, batch_size=128)\n","print(\"test loss, test acc:\", results)\n","\n","# list all data in history\n","print(history.history.keys())\n","# summarize history for accuracy\n","plt.plot(history.history['accuracy'])\n","plt.title('model accuracy')\n","plt.ylabel('accuracy')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'test'], loc='upper left')\n","plt.show()\n","# summarize history for loss\n","plt.plot(history.history['loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'test'], loc='upper left')\n","plt.show()"],"execution_count":95,"outputs":[{"output_type":"stream","text":["15664/15664 [==============================] - 1s 55us/step\n","test loss, test acc: [2.19084245082185, 0.4435010254383087]\n","dict_keys(['loss', 'accuracy'])\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"mnhpjPxwn09b","colab_type":"text"},"source":["# Save Model\n"]},{"cell_type":"code","metadata":{"id":"KL0lBWzfn-_D","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1593846336744,"user_tz":180,"elapsed":723,"user":{"displayName":"Vinícius Dias","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjmnjUGHLWXLxURc9fL1MKWL6HhV5-jFE23cFdnRw=s64","userId":"11430726225538694207"}},"outputId":"6c404273-3a15-4b32-df28-17fd2c690b37"},"source":["from google.colab import drive\n","\n","drive.mount('/content/gdrive')\n","model.save(F\"/content/gdrive/My Drive/Colab Notebooks/jq-model.h5\")"],"execution_count":71,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iszqe15u3XWs","colab_type":"text"},"source":["# Load Model"]},{"cell_type":"code","metadata":{"id":"xMbUAwqv33Q8","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":90},"executionInfo":{"status":"ok","timestamp":1593868671040,"user_tz":180,"elapsed":1641,"user":{"displayName":"Vinícius Dias","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjmnjUGHLWXLxURc9fL1MKWL6HhV5-jFE23cFdnRw=s64","userId":"11430726225538694207"}},"outputId":"b16de164-434f-4984-c421-b730311496b8"},"source":["from keras.models import load_model\n","from google.colab import drive\n","\n","drive.mount('/content/gdrive')\n","model = load_model(F\"/content/gdrive/My Drive/Colab Notebooks/jq-model.h5\")"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/indexed_slices.py:434: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.\n","  \"Converting sparse IndexedSlices to a dense Tensor of unknown shape. \"\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"fvEkmxzTbg9v","colab_type":"text"},"source":["# Generate Sequence"]},{"cell_type":"code","metadata":{"id":"tcNJ_wn3Vfra","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"status":"ok","timestamp":1593875867641,"user_tz":180,"elapsed":1127,"user":{"displayName":"Vinícius Dias","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjmnjUGHLWXLxURc9fL1MKWL6HhV5-jFE23cFdnRw=s64","userId":"11430726225538694207"}},"outputId":"97ad229e-84a8-4876-8178-f5fce0b3cc15"},"source":["def generate_sequence(model, seed_text, n_generated_words):\n","  result = list()\n","  in_text = seed_text\n","\n","  for _ in range(n_generated_words):\n","    pred_sequences = []\n","\n","    for i in range(0, len(in_text) - sequence_length):\n","        pred_sequences.append(in_text[i: i + sequence_length])\n","\n","    pred_sequences_size = len(pred_sequences)\n","\n","    pred_input = np.zeros((pred_sequences_size, sequence_length), dtype=np.int8)\n","\n","    # converts each char to its related index and add them into the matrices\n","    for i, inpt in enumerate(pred_sequences):\n","        for j, char in enumerate(inpt):\n","            pred_input[i, j] = char_indices[char]\n","\n","    pred_output = model.predict_classes(pred_input)\n","    \n","    for i in pred_output:\n","        result_char = indices_char[i]\n","        result.append(result_char)\n","        in_text += result_char\n","  \n","  return ''.join(result)\n","\n","seq = generate_sequence(model, 'o amor e o fogo que arde sem se ver e ferida que doi e não se sente um contentamento descontente e dor que desatina sem doer', 3)\n","print(seq) "],"execution_count":96,"outputs":[{"output_type":"stream","text":["e  e eemppeneor asaalida due ee tmspão veipemte em mortasde ento de eante do e ae  mue ee scerd\n","memppe se  e eemppeneor asaalida due ee tmspão veipemte em mortasde ento de eante do e ae  mue ee scerd\n","memppe sasaa as  relds  d sr ena dea es aeesao qajron u e  perarr e estrdee as de de mnv ssmenre  teer oaa oraiee  e eemppeneor asaalida due ee tmspão veipemte em mortasde ento de eante do e ae  mue ee scerd\n","memppe sasaa as  relds  d sr ena dea es aeesao qajron u e  perarr e estrdee as de de mnv ssmenre  teer oaa oraieemee au  oesds \n","d sr ena dea es aeesao qajron u e  perarr e estrdee as de de mnv ssmenre  teer oaa oraieeber m spmedaaidaahtatut ee sesta s    duloe aemcsemrrt  edsaspaee nd  pesqespeaoveeinto deem  a   a \n"," s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lgpgVEw44Iu0","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}